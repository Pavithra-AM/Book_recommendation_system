# -*- coding: utf-8 -*-
"""book_Recommendation_system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NM43Qy5qLn1c2GiRtZ2-fzWGBTWhWgm5
"""

import pandas as pd
import numpy as np

books=pd.read_csv('/content/Books.csv')
users=pd.read_csv('/content/Users.csv')
rating=pd.read_csv('/content/Ratings.csv')

books.head()

rating.head()

users.head()

print(books.shape)
print(rating.shape)
print(users.shape)

books.isnull().sum()

users.isnull().sum()

rating.isnull().sum()

books.duplicated().sum()
rating.duplicated().sum()
users.duplicated().sum()

"""**POPULARTITY BASED RECOMMEND SYSTEM**



"""

rating_with_name=rating.merge(books,on='ISBN')

rating_with_name.groupby('Book-Title').count()

num_rating_df=rating_with_name.groupby('Book-Title').count()['Book-Rating'].reset_index()
num_rating_df.rename(columns={'Book-Rating': 'num-ratings'}, inplace=True)
num_rating_df

avg_rating_df = rating_with_name.groupby('Book-Title')['Book-Rating'].mean().reset_index()

avg_rating_df.rename(columns={'Book-Rating': 'avg-ratings'}, inplace=True)
avg_rating_df

popular_df=num_rating_df.merge(avg_rating_df,on='Book-Title')
popular_df

popular_df=popular_df[popular_df['num-ratings']>=250].sort_values('avg-ratings',ascending=False).head(50)

popular_df.merge(books,on='Book-Title').drop_duplicates('Book-Title')

popular_df=popular_df.merge(books,on='Book-Title').drop_duplicates('Book-Title')[['Book-Title','Book-Author','Image-URL-S','num-ratings','avg-ratings']]
popular_df

# Function to get collaborative filtering recommendations for a specific user
def get_collaborative_recommendations(user_id, num_recommendations=5):
    # Predict ratings for all books for the given user
    book_ids = books['ISBN'].unique()  # Unique book identifiers
    book_titles = books.set_index('ISBN')['Book-Title'].to_dict()  # Map ISBN to Book Titles
    recommended_books = []

    for book_id in book_ids:
        prediction = model.predict(user_id, book_id)  # Predict rating
        recommended_books.append((book_id, prediction.est))  # Append book ID and estimated rating

    # Sort books by estimated ratings in descending order
    recommended_books = sorted(recommended_books, key=lambda x: x[1], reverse=True)

    # Print each recommendation on a new line
    print(f"Top {num_recommendations} recommended books for User-ID {user_id}:\n")
    for book_id, rating in recommended_books[:num_recommendations]:
        print(f"- {book_titles[book_id]} (Estimated Rating: {rating:.2f})")

# Example usage
user_id = 12345  # Replace with a specific User-ID from your dataset
get_collaborative_recommendations(user_id, num_recommendations=5)

